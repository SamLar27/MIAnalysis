select(term, aRR, lower_CI95, upper_CI95, p_value)  # Keep relevant columns
return(Results_multivariate_analysis)
}
aRR_results_no_trial <- get_aRR_results(Data_Oracle, selected_variables, imp_col = ".imp",
model_type = "nb")
aRR_results_no_trial
get_aRR_results <- function(data, variables, imp_col = ".imp", followup_col = NULL,
trial_col = NULL, trial_factor = NULL, offset_FU = NULL,
imp_n = NULL, model_type = "nb", family = NULL, custom_model_func = NULL) {
# Automatically detect the number of imputations if imp_n is NULL
if (is.null(imp_n)) {
imp_n <- length(unique(data[[imp_col]]))
}
# Define trial term in formula based on trial_factor argument
trial_term <- if (!is.null(trial_col) && trial_factor == "Yes") {
paste("+ as.factor(", trial_col, ")")
} else {
""
}
# Define offset term in formula based on offset_FU argument
offset_term <- if (!is.null(followup_col) && offset_FU == "Yes") {
paste("+ offset(log(", followup_col, "))")
} else {
""
}
# Construct the formula string dynamically
formula_string <- paste("Number_severe_asthma_attacks_during_followup ~",
paste(variables, collapse = " + "),
offset_term, trial_term)
# Convert to formula
model_formula <- as.formula(formula_string)
# Initialize list to store models
res_comb <- list()
# Loop through each imputed dataset
for (i in 1:imp_n) {
# Subset data for the specific imputation
data_subset <- data %>% filter(!!sym(imp_col) == i)
# Fit model based on type
if (model_type == "nb") {
res_comb[[i]] <- glm.nb(model_formula, data = data_subset)
} else if (model_type == "glm") {
if (is.null(family)) stop("Please specify a family for glm.")
res_comb[[i]] <- glm(model_formula, family = family, data = data_subset)
} else if (model_type == "custom") {
if (is.null(custom_model_func)) stop("Please provide a custom_model_func for custom models.")
res_comb[[i]] <- custom_model_func(model_formula, data = data_subset)
} else {
stop("Unsupported model type. Use 'nb', 'glm', or 'custom'.")
}
}
# Pooling results using Rubin's Rules
res_pool <- summary(pool(res_comb), conf.int = TRUE, exp = FALSE)
# Extract relevant results
Results_multivariate_analysis <- res_pool[, c(1, 2, 3, 7, 8)]
# Filter only terms that match the selected variables
Results_multivariate_analysis <- Results_multivariate_analysis %>%
filter(grepl(paste(variables, collapse = "|"), term)) %>%
as.data.frame()
# Compute aRR, CI95, and p-values
Results_multivariate_analysis <- Results_multivariate_analysis %>%
mutate(
estimate_raw = estimate,  # Original Estimate (before exp)
CI95_lower_raw = `2.5 %`,  # Lower CI95 before exp
CI95_upper_raw = `97.5 %`,  # Upper CI95 before exp
aRR = exp(estimate),  # Adjusted Rate Ratio (exp transformed)
lower_CI95 = exp(CI95_lower_raw),  # Lower CI95 (exp transformed)
upper_CI95 = exp(CI95_upper_raw),  # Upper CI95 (exp transformed)
z_value = estimate / std.error,  # Z-score
p_value = 2 * (1 - pnorm(abs(z_value)))  # Two-tailed p-value
) %>%
select(term, estimate_raw, CI95_lower_raw, CI95_upper_raw, aRR, lower_CI95, upper_CI95, p_value)  # Keep relevant columns
return(Results_multivariate_analysis)
}
aRR_results_no_trial <- get_aRR_results(Data_Oracle, selected_variables, imp_col = ".imp",
model_type = "nb")
aRR_results_no_trial
get_aRR_results <- function(data, variables, imp_col = ".imp", followup_col = NULL,
trial_col = NULL, trial_factor = NULL, offset_FU = NULL,
imp_n = NULL, model_type = "nb", family = NULL, custom_model_func = NULL) {
# Automatically detect the number of imputations if imp_n is NULL
if (is.null(imp_n)) {
imp_n <- length(unique(data[[imp_col]]))
}
# Define trial term in formula based on trial_factor argument
trial_term <- if (!is.null(trial_col) && trial_factor == "Yes") {
paste("+ as.factor(", trial_col, ")")
} else {
""
}
# Define offset term in formula based on offset_FU argument
offset_term <- if (!is.null(followup_col) && offset_FU == "Yes") {
paste("+ offset(log(", followup_col, "))")
} else {
""
}
# Construct the formula string dynamically
formula_string <- paste("Number_severe_asthma_attacks_during_followup ~",
paste(variables, collapse = " + "),
offset_term, trial_term)
# Convert to formula
model_formula <- as.formula(formula_string)
# Initialize list to store models
res_comb <- list()
# Loop through each imputed dataset
for (i in 1:imp_n) {
# Subset data for the specific imputation
data_subset <- data %>% filter(!!sym(imp_col) == i)
# Fit model based on type
if (model_type == "nb") {
res_comb[[i]] <- glm.nb(model_formula, data = data_subset)
} else if (model_type == "glm") {
if (is.null(family)) stop("Please specify a family for glm.")
res_comb[[i]] <- glm(model_formula, family = family, data = data_subset)
} else if (model_type == "custom") {
if (is.null(custom_model_func)) stop("Please provide a custom_model_func for custom models.")
res_comb[[i]] <- custom_model_func(model_formula, data = data_subset)
} else {
stop("Unsupported model type. Use 'nb', 'glm', or 'custom'.")
}
}
# Pooling results using Rubin's Rules
res_pool <- summary(pool(res_comb), conf.int = TRUE, exp = FALSE)
# Extract relevant results
Results_multivariate_analysis <- res_pool[, c(1, 2, 3, 7, 8)]
# Filter only terms that match the selected variables
Results_multivariate_analysis <- Results_multivariate_analysis %>%
filter(grepl(paste(variables, collapse = "|"), term)) %>%
as.data.frame()
# Compute aRR, CI95, and p-values
Results_multivariate_analysis <- Results_multivariate_analysis %>%
mutate(
#estimate_raw = estimate,  # Original Estimate (before exp)
estimate_CI95_lower = `2.5 %`,  # Lower CI95 before exp
estimate_CI95_upper = `97.5 %`,  # Upper CI95 before exp
exp_estimate = exp(estimate),  # Adjusted Rate Ratio (exp transformed)
exp_CI95_lower = exp(CI95_lower_raw),  # Lower CI95 (exp transformed)
exp_CI95_upper = exp(CI95_upper_raw),  # Upper CI95 (exp transformed)
z_value = estimate / std.error,  # Z-score
p_value = 2 * (1 - pnorm(abs(z_value)))  # Two-tailed p-value
) %>%
select(term, estimate, estimate_CI95_lower, estimate_CI95_upper, exp_estimate, exp_CI95_lower, exp_CI95_upper, p_value)  # Keep relevant columns
return(Results_multivariate_analysis)
}
aRR_results_no_trial <- get_aRR_results(Data_Oracle, selected_variables, imp_col = ".imp",
model_type = "nb")
get_aRR_results <- function(data, variables, imp_col = ".imp", followup_col = NULL,
trial_col = NULL, trial_factor = NULL, offset_FU = NULL,
imp_n = NULL, model_type = "nb", family = NULL, custom_model_func = NULL) {
# Automatically detect the number of imputations if imp_n is NULL
if (is.null(imp_n)) {
imp_n <- length(unique(data[[imp_col]]))
}
# Define trial term in formula based on trial_factor argument
trial_term <- if (!is.null(trial_col) && trial_factor == "Yes") {
paste("+ as.factor(", trial_col, ")")
} else {
""
}
# Define offset term in formula based on offset_FU argument
offset_term <- if (!is.null(followup_col) && offset_FU == "Yes") {
paste("+ offset(log(", followup_col, "))")
} else {
""
}
# Construct the formula string dynamically
formula_string <- paste("Number_severe_asthma_attacks_during_followup ~",
paste(variables, collapse = " + "),
offset_term, trial_term)
# Convert to formula
model_formula <- as.formula(formula_string)
# Initialize list to store models
res_comb <- list()
# Loop through each imputed dataset
for (i in 1:imp_n) {
# Subset data for the specific imputation
data_subset <- data %>% filter(!!sym(imp_col) == i)
# Fit model based on type
if (model_type == "nb") {
res_comb[[i]] <- glm.nb(model_formula, data = data_subset)
} else if (model_type == "glm") {
if (is.null(family)) stop("Please specify a family for glm.")
res_comb[[i]] <- glm(model_formula, family = family, data = data_subset)
} else if (model_type == "custom") {
if (is.null(custom_model_func)) stop("Please provide a custom_model_func for custom models.")
res_comb[[i]] <- custom_model_func(model_formula, data = data_subset)
} else {
stop("Unsupported model type. Use 'nb', 'glm', or 'custom'.")
}
}
# Pooling results using Rubin's Rules
res_pool <- summary(pool(res_comb), conf.int = TRUE, exp = FALSE)
# Extract relevant results
Results_multivariate_analysis <- res_pool[, c(1, 2, 3, 7, 8)]
# Filter only terms that match the selected variables
Results_multivariate_analysis <- Results_multivariate_analysis %>%
filter(grepl(paste(variables, collapse = "|"), term)) %>%
as.data.frame()
# Compute aRR, CI95, and p-values
Results_multivariate_analysis <- Results_multivariate_analysis %>%
mutate(
#estimate_raw = estimate,  # Original Estimate (before exp)
estimate_CI95_lower = `2.5 %`,  # Lower CI95 before exp
estimate_CI95_upper = `97.5 %`,  # Upper CI95 before exp
exp_estimate = exp(estimate),  # Adjusted Rate Ratio (exp transformed)
exp_CI95_lower = exp(estimate_CI95_lower),  # Lower CI95 (exp transformed)
exp_CI95_upper = exp(estimate_CI95_upper),  # Upper CI95 (exp transformed)
z_value = estimate / std.error,  # Z-score
p_value = 2 * (1 - pnorm(abs(z_value)))  # Two-tailed p-value
) %>%
select(term, estimate, estimate_CI95_lower, estimate_CI95_upper, exp_estimate, exp_CI95_lower, exp_CI95_upper, p_value)  # Keep relevant columns
return(Results_multivariate_analysis)
}
aRR_results_no_trial <- get_aRR_results(Data_Oracle, selected_variables, imp_col = ".imp",
model_type = "nb")
aRR_results_no_trial
get_aRR_results <- function(data, variables, imp_col = ".imp", followup_col = NULL,
trial_col = NULL, trial_factor = NULL, offset_FU = NULL,
imp_n = NULL, model_type = "nb", family = NULL, custom_model_func = NULL) {
# Automatically detect the number of imputations if imp_n is NULL
if (is.null(imp_n)) {
imp_n <- length(unique(data[[imp_col]]))
}
# Define trial term in formula based on trial_factor argument
trial_term <- if (!is.null(trial_col) && trial_factor == "Yes") {
paste("+ as.factor(", trial_col, ")")
} else {
""
}
# Define offset term in formula based on offset_FU argument
offset_term <- if (!is.null(followup_col) && offset_FU == "Yes") {
paste("+ offset(log(", followup_col, "))")
} else {
""
}
# Construct the formula string dynamically
formula_string <- paste("Number_severe_asthma_attacks_during_followup ~",
paste(variables, collapse = " + "),
offset_term, trial_term)
# Convert to formula
model_formula <- as.formula(formula_string)
# Initialize list to store models
res_comb <- list()
# Loop through each imputed dataset
for (i in 1:imp_n) {
# Subset data for the specific imputation
data_subset <- data %>% filter(!!sym(imp_col) == i)
# Fit model based on type
if (model_type == "nb") {
res_comb[[i]] <- glm.nb(model_formula, data = data_subset)
} else if (model_type == "glm") {
if (is.null(family)) stop("Please specify a family for glm.")
res_comb[[i]] <- glm(model_formula, family = family, data = data_subset)
} else if (model_type == "custom") {
if (is.null(custom_model_func)) stop("Please provide a custom_model_func for custom models.")
res_comb[[i]] <- custom_model_func(model_formula, data = data_subset)
} else {
stop("Unsupported model type. Use 'nb', 'glm', or 'custom'.")
}
}
# Pooling results using Rubin's Rules
res_pool <- summary(pool(res_comb), conf.int = TRUE, exp = FALSE)
# Extract relevant results
Results_multivariate_analysis <- res_pool[, c(1, 2, 3, 7, 8)]
# Filter only terms that match the selected variables
Results_multivariate_analysis <- Results_multivariate_analysis %>%
filter(grepl(paste(variables, collapse = "|"), term)) %>%
as.data.frame()
# Determine the appropriate name for exponentiated estimates
if (model_type == "nb") {
estimate_name <- "RR"  # Rate Ratio for Negative Binomial
} else if (model_type == "glm" && family == "binomial") {
estimate_name <- "OR"  # Odds Ratio for Logistic Regression
} else if (model_type == "glm" && family == "poisson") {
estimate_name <- "IRR"  # Incidence Rate Ratio for Poisson
} else if (model_type == "custom") {
estimate_name <- "Estimate_custom"  # Generic name for custom models
} else {
estimate_name <- "Exp_Estimate"  # Default name
}
# Compute estimates and rename accordingly
Results_multivariate_analysis <- Results_multivariate_analysis %>%
mutate(
estimate_CI95_lower = `2.5 %`,  # Lower CI95 before exp
estimate_CI95_upper = `97.5 %`,  # Upper CI95 before exp
exp_estimate = exp(estimate),  # Exponentiated Estimate
exp_CI95_lower = exp(estimate_CI95_lower),  # Lower CI95 (exp transformed)
exp_CI95_upper = exp(estimate_CI95_upper),  # Upper CI95 (exp transformed)
z_value = estimate / std.error,  # Z-score
p_value = 2 * (1 - pnorm(abs(z_value)))  # Two-tailed p-value
) %>%
select(term, estimate, estimate_CI95_lower, estimate_CI95_upper, exp_estimate, exp_CI95_lower, exp_CI95_upper, p_value) %>%
rename_with(~ estimate_name, .cols = "exp_estimate") %>%
rename_with(~ paste0(estimate_name, "_CI95_lower"), .cols = "exp_CI95_lower") %>%
rename_with(~ paste0(estimate_name, "_CI95_upper"), .cols = "exp_CI95_upper")
return(Results_multivariate_analysis)
}
# Example call for Negative Binomial
aRR_results_no_trial <- get_aRR_results(Data_Oracle, selected_variables, imp_col = ".imp",
model_type = "nb")
# Example call for Logistic Regression (GLM with binomial family)
aRR_results_logistic <- get_aRR_results(Data_Oracle, selected_variables, imp_col = ".imp",
model_type = "glm", family = "binomial")
# Example call for Negative Binomial
aRR_results_no_trial <- get_aRR_results(Data_Oracle, selected_variables, imp_col = ".imp",
model_type = "nb")
aRR_results_no_trial
# Example call for Logistic Regression (GLM with binomial family)
aRR_results_logistic <- get_aRR_results(Data_Oracle, selected_variables, imp_col = ".imp",
model_type = "glm", family = "binomial")
# Example call for Poisson Regression (GLM with Poisson family)
aRR_results_poisson <- get_aRR_results(Data_Oracle, selected_variables, imp_col = ".imp",
model_type = "glm", family = "poisson")
aRR_results_poisson
# Example call for Logistic Regression (GLM with binomial family)
aRR_results_logistic <- get_aRR_results(Data_Oracle, selected_variables, imp_col = ".imp",
model_type = "glm", family = "binomial")
get_multivariable_estimates <- function(data, variables, imp_col = ".imp", followup_col = NULL,
trial_col = NULL, trial_factor = NULL, offset_FU = NULL,
imp_n = NULL, model_type = "nb", family = NULL, custom_model_func = NULL) {
# Automatically detect the number of imputations if imp_n is NULL
if (is.null(imp_n)) {
imp_n <- length(unique(data[[imp_col]]))
}
# Define trial term in formula based on trial_factor argument
trial_term <- if (!is.null(trial_col) && trial_factor == "Yes") {
paste("+ as.factor(", trial_col, ")")
} else {
""
}
# Define offset term in formula based on offset_FU argument
offset_term <- if (!is.null(followup_col) && offset_FU == "Yes") {
paste("+ offset(log(", followup_col, "))")
} else {
""
}
# Construct the formula string dynamically
formula_string <- paste("Number_severe_asthma_attacks_during_followup ~",
paste(variables, collapse = " + "),
offset_term, trial_term)
# Convert to formula
model_formula <- as.formula(formula_string)
# Initialize list to store models
res_comb <- list()
# Loop through each imputed dataset
for (i in 1:imp_n) {
# Subset data for the specific imputation
data_subset <- data %>% filter(!!sym(imp_col) == i)
# Fit model based on type
if (model_type == "nb") {
res_comb[[i]] <- glm.nb(model_formula, data = data_subset)
} else if (model_type == "glm") {
if (is.null(family)) stop("Please specify a family for glm.")
res_comb[[i]] <- glm(model_formula, family = family, data = data_subset)
} else if (model_type == "custom") {
if (is.null(custom_model_func)) stop("Please provide a custom_model_func for custom models.")
res_comb[[i]] <- custom_model_func(model_formula, data = data_subset)
} else {
stop("Unsupported model type. Use 'nb', 'glm', or 'custom'.")
}
}
# Pooling results using Rubin's Rules
res_pool <- summary(pool(res_comb), conf.int = TRUE, exp = FALSE)
# Extract relevant results
Results_multivariate_analysis <- res_pool[, c(1, 2, 3, 7, 8)]
# Filter only terms that match the selected variables
Results_multivariate_analysis <- Results_multivariate_analysis %>%
filter(grepl(paste(variables, collapse = "|"), term)) %>%
as.data.frame()
# Determine the appropriate name for exponentiated estimates
if (model_type == "nb") {
estimate_name <- "RR"  # Rate Ratio for Negative Binomial
} else if (model_type == "glm" && family == "binomial") {
estimate_name <- "OR"  # Odds Ratio for Logistic Regression
} else if (model_type == "glm" && family == "poisson") {
estimate_name <- "IRR"  # Incidence Rate Ratio for Poisson
} else if (model_type == "custom") {
estimate_name <- "Estimate_custom"  # Generic name for custom models
} else {
estimate_name <- "Exp_Estimate"  # Default name
}
# Compute estimates and rename accordingly
Results_multivariate_analysis <- Results_multivariate_analysis %>%
mutate(
estimate_CI95_lower = `2.5 %`,  # Lower CI95 before exp
estimate_CI95_upper = `97.5 %`,  # Upper CI95 before exp
exp_estimate = exp(estimate),  # Exponentiated Estimate
exp_CI95_lower = exp(estimate_CI95_lower),  # Lower CI95 (exp transformed)
exp_CI95_upper = exp(estimate_CI95_upper),  # Upper CI95 (exp transformed)
z_value = estimate / std.error,  # Z-score
p_value = 2 * (1 - pnorm(abs(z_value)))  # Two-tailed p-value
) %>%
select(term, estimate, estimate_CI95_lower, estimate_CI95_upper, exp_estimate, exp_CI95_lower, exp_CI95_upper, p_value) %>%
rename_with(~ estimate_name, .cols = "exp_estimate") %>%
rename_with(~ paste0(estimate_name, "_CI95_lower"), .cols = "exp_CI95_lower") %>%
rename_with(~ paste0(estimate_name, "_CI95_upper"), .cols = "exp_CI95_upper")
return(Results_multivariate_analysis)
}
# Example call for Negative Binomial
get_multivariable_estimates <- get_aRR_results(Data_Oracle, selected_variables, imp_col = ".imp",
model_type = "nb")
# Example call for Negative Binomial
aRR_results_nb <- get_multivariable_estimates(Data_Oracle, selected_variables, imp_col = ".imp",
model_type = "nb")
get_multivariable_estimates <- function(data, variables, imp_col = ".imp", followup_col = NULL,
trial_col = NULL, trial_factor = NULL, offset_FU = NULL,
imp_n = NULL, model_type = "nb", family = NULL, custom_model_func = NULL) {
# Automatically detect the number of imputations if imp_n is NULL
if (is.null(imp_n)) {
imp_n <- length(unique(data[[imp_col]]))
}
# Define trial term in formula based on trial_factor argument
trial_term <- if (!is.null(trial_col) && trial_factor == "Yes") {
paste("+ as.factor(", trial_col, ")")
} else {
""
}
# Define offset term in formula based on offset_FU argument
offset_term <- if (!is.null(followup_col) && offset_FU == "Yes") {
paste("+ offset(log(", followup_col, "))")
} else {
""
}
# Construct the formula string dynamically
formula_string <- paste("Number_severe_asthma_attacks_during_followup ~",
paste(variables, collapse = " + "),
offset_term, trial_term)
# Convert to formula
model_formula <- as.formula(formula_string)
# Initialize list to store models
res_comb <- list()
# Loop through each imputed dataset
for (i in 1:imp_n) {
# Subset data for the specific imputation
data_subset <- data %>% filter(!!sym(imp_col) == i)
# Fit model based on type
if (model_type == "nb") {
res_comb[[i]] <- glm.nb(model_formula, data = data_subset)
} else if (model_type == "glm") {
if (is.null(family)) stop("Please specify a family for glm.")
res_comb[[i]] <- glm(model_formula, family = family, data = data_subset)
} else if (model_type == "custom") {
if (is.null(custom_model_func)) stop("Please provide a custom_model_func for custom models.")
res_comb[[i]] <- custom_model_func(model_formula, data = data_subset)
} else {
stop("Unsupported model type. Use 'nb', 'glm', or 'custom'.")
}
}
# Pooling results using Rubin's Rules
res_pool <- summary(pool(res_comb), conf.int = TRUE, exp = FALSE)
# Extract relevant results
Results_multivariate_analysis <- res_pool[, c(1, 2, 3, 7, 8)]
# Filter only terms that match the selected variables
Results_multivariate_analysis <- Results_multivariate_analysis %>%
filter(grepl(paste(variables, collapse = "|"), term)) %>%
as.data.frame()
# Determine the appropriate name for exponentiated estimates
if (model_type == "nb") {
estimate_name <- "RR"  # Rate Ratio for Negative Binomial
} else if (model_type == "glm" && family == "binomial") {
estimate_name <- "OR"  # Odds Ratio for Logistic Regression
} else if (model_type == "glm" && family == "poisson") {
estimate_name <- "IRR"  # Incidence Rate Ratio for Poisson
} else if (model_type == "custom") {
estimate_name <- "Estimate_custom"  # Generic name for custom models
} else {
estimate_name <- "Exp_Estimate"  # Default name
}
# Compute estimates and rename accordingly
Results_multivariate_analysis <- Results_multivariate_analysis %>%
mutate(
estimate_CI95_lower = `2.5 %`,  # Lower CI95 before exp
estimate_CI95_upper = `97.5 %`,  # Upper CI95 before exp
exp_estimate = exp(estimate),  # Exponentiated Estimate
exp_CI95_lower = exp(estimate_CI95_lower),  # Lower CI95 (exp transformed)
exp_CI95_upper = exp(estimate_CI95_upper),  # Upper CI95 (exp transformed)
z_value = estimate / std.error,  # Z-score
p_value = 2 * (1 - pnorm(abs(z_value)))  # Two-tailed p-value
) %>%
select(term, estimate, estimate_CI95_lower, estimate_CI95_upper, exp_estimate, exp_CI95_lower, exp_CI95_upper, p_value) %>%
rename_with(~ estimate_name, .cols = "exp_estimate") %>%
rename_with(~ paste0(estimate_name, "_CI95_lower"), .cols = "exp_CI95_lower") %>%
rename_with(~ paste0(estimate_name, "_CI95_upper"), .cols = "exp_CI95_upper")
return(Results_multivariate_analysis)
}
# Example call for Negative Binomial
aRR_results_nb <- get_multivariable_estimates(Data_Oracle, selected_variables, imp_col = ".imp",
model_type = "nb")
aRR_results_nb
#======================================================================================================================================
install.packages("devtools")
install.packages("devtools")
install.packages("roxygen2")
install.packages("roxygen2")
install.packages("usethis")
library(devtools)
library(roxygen2)
library(usethis)
library(devtools)
library(roxygen2)
library(usethis)
usethis::create_package("/Users/macbookpro/Documents/École/Doctorat en recherche/R_packages/MI_Analysis")
usethis::create_package("/Users/macbookpro/Documents/École/Doctorat en recherche/R_packages/MIAnalysis")
devtools::document()
setwd("/Users/macbookpro/Documents/École/Doctorat en recherche/R_packages/MIAnalysis")
rlang::last_trace()
getwd()
devtools::document()
devtools::document()
devtools::install()
> devtools::install()
devtools::install()
library(MIAnalysis)
